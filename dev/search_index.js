var documenterSearchIndex = {"docs":
[{"location":"#Modeling-Planar-Belt-Transmissions","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"","category":"section"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"GitHub source","category":"page"},{"location":"#Background","page":"Modeling Planar Belt Transmissions","title":"Background","text":"","category":"section"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"Belt transmissions involve several moving elements and a variety of materials, enabling flexible power transmission but leading to complex and interdependent system design requirements. The basic performance of a candidate belt transmission can be estimated from kinematic analysis, while a dynamic simulation can give a much better idea of actual system performance and limits.","category":"page"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"This Julia package assists users in the kinematic analysis, designing belt transmissions using flat or synchronous belts. Primary structures model pulleys and belt segments, these can be analyzed and plotted through recipes for Plots.jl. BeltTransmission was used to determine the basic design of the Moover variants.","category":"page"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"See the package readme for release, license, and development information.","category":"page"},{"location":"#Dependencies","page":"Modeling Planar Belt Transmissions","title":"Dependencies","text":"","category":"section"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"Geometry2D\nUtility","category":"page"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"And from the standard repository those defined in the Project.toml.","category":"page"},{"location":"#Installation","page":"Modeling Planar Belt Transmissions","title":"Installation","text":"","category":"section"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"using Pkg\nPkg.add(\"https://github.com/mechanomy/BeltTransmission.jl.git\")","category":"page"},{"location":"#Use-Cases","page":"Modeling Planar Belt Transmissions","title":"Use Cases","text":"","category":"section"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"Designing a planar belt transmission is the primary use case for BeltTransmission, but this design can have several objectives according to what is already known about the system. If the positions, sizes, and belt routing are known, these can be entered to calculate belt length and arrival and departure angles on each pulley. BeltTransmission can also be used to solve systems for other unknowns, say to determine the position of an idler pulley given a known belt length.","category":"page"},{"location":"#Basic-belt-transmissions","page":"Modeling Planar Belt Transmissions","title":"Basic belt transmissions","text":"","category":"section"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"The goal of these examples is to calculate the belt length given pulley sizes and locations.","category":"page"},{"location":"#Two-pulleys","page":"Modeling Planar Belt Transmissions","title":"Two pulleys","text":"","category":"section"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"using Unitful, Plots\nusing Geometry2D \nusing BeltTransmission\n\n#create the pulleys\nctrA = Geometry2D.Point(10u\"mm\", 10u\"mm\")\npA = PlainPulley( pitch=Geometry2D.Circle( center=ctrA, radius=10u\"mm\"), axis=Geometry2D.UnitVector(0,0,1), name=\"A\")\npB = PlainPulley( pitch=Geometry2D.Circle(100u\"mm\", 100u\"mm\", 20u\"mm\"), axis=Geometry2D.UnitVector(0,0,1), name=\"B\")\n\n#create the belt route\nroute = [pA, pB] #from A to B and back to A\n\n#solve the departure and arrival angles on each PlainPulley\nsolved = calculateRouteAngles(route)\n\n#create belt Segments between the Pulleys\nsegments = route2Segments(solved)\nbeltLength = calculateBeltLength(segments)\n\nplot(segments, title=\"two pulleys\")","category":"page"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"By convention, Pulleys having a positive rotation (+uk) have a dot at their center to indicate the vector's tip, while negative rotation is shown with an X for the arrow's fletching. Once solved, the system can be interrogated:","category":"page"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"calculateBeltLength(segments)","category":"page"},{"location":"#A-variety-of-pulleys","page":"Modeling Planar Belt Transmissions","title":"A variety of pulleys","text":"","category":"section"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"using Unitful, Plots\nusing Geometry2D \nusing BeltTransmission\n\n#create the pulleys\nctrA = Geometry2D.Point(10u\"mm\", 10u\"mm\")\npA = PlainPulley( pitch=Geometry2D.Circle( center=ctrA, radius=10u\"mm\"), axis=Geometry2D.UnitVector(0,0,1), name=\"A\")\npB = PlainPulley( pitch=Geometry2D.Circle(100u\"mm\",  20u\"mm\", 20u\"mm\"), axis=Geometry2D.UnitVector(0,0,1), name=\"B\")\npC = PlainPulley( pitch=Geometry2D.Circle( 80u\"mm\",  40u\"mm\",  5u\"mm\"), axis=-Geometry2D.UnitVector(0,0,1), name=\"C\")\npD = PlainPulley( pitch=Geometry2D.Circle(150u\"mm\",  40u\"mm\",  5u\"mm\"), axis=Geometry2D.UnitVector(0,0,1), name=\"D\")\npE = PlainPulley( pitch=Geometry2D.Circle(100u\"mm\",  80u\"mm\",  5u\"mm\"), axis=Geometry2D.UnitVector(0,0,1), name=\"E\")\n\n#create the belt route\nroute = [pA, pB, pC, pD, pE]\n\n#solve the departure and arrival angles on each PlainPulley\nsolved = calculateRouteAngles(route)\n\n#create belt Segments between the Pulleys\nsegments = route2Segments(solved)\n\nplot(segments, title=\"Various Pulleys\" )","category":"page"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"calculateBeltLength(segments)","category":"page"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"printSegments(segments)","category":"page"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"Positive rotation of PlainPulley A will cause PlainPulley C to rotate negatively, hence the negative rotation axis on C. In addition to the PlainPulley rotation axis, the point of departure on each PlainPulley is given a slight arrow in the direction of positive belt rotation.","category":"page"},{"location":"#Multiple-systems","page":"Modeling Planar Belt Transmissions","title":"Multiple systems","text":"","category":"section"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"using Unitful, Plots\nusing Geometry2D \nusing BeltTransmission\n\n#create the pulleys\npA = PlainPulley( pitch=Geometry2D.Circle( 10u\"mm\",  20u\"mm\", 20u\"mm\"), axis=Geometry2D.UnitVector(0,0,1), name=\"B\")\npB = PlainPulley( pitch=Geometry2D.Circle(100u\"mm\",  20u\"mm\", 30u\"mm\"), axis=Geometry2D.UnitVector(0,0,1), name=\"B\")\n\npX = PlainPulley( pitch=Geometry2D.Circle( 10u\"mm\",  20u\"mm\", 15u\"mm\"), axis=Geometry2D.UnitVector(0,0,1), name=\"X\")\npY = PlainPulley( pitch=Geometry2D.Circle( 50u\"mm\",  80u\"mm\",  5u\"mm\"), axis=Geometry2D.UnitVector(0,0,1), name=\"Y\")\n\n#create the belt systems \nsegAB = route2Segments( calculateRouteAngles( [pA, pB] ))\nsegXY = route2Segments( calculateRouteAngles( [pX, pY] ))\n\nplot( segAB, title=\"Parallel Systems\", xlabel=\"[mm]\", ylabel=\"[mm]\", xlims=([-50,150]), ylims=([-50,100]), legend=false, dpi=100, size=(1000,500)) \nplot!(segXY, segmentColor=:cyan)","category":"page"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"PlainPulley body colors are assigned by the default colormap, but segmentColor may be used to control the belt segment color. Other Plots.jl attributes may be used as expected.","category":"page"},{"location":"#Development-Plan","page":"Modeling Planar Belt Transmissions","title":"Development Plan","text":"","category":"section"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"BeltTransmission.jl is under active development, enhancement requests are welcome.","category":"page"},{"location":"#BeltTransmission.jl-API","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.jl API","text":"","category":"section"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"CurrentModule= BeltTransmission","category":"page"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"Modules=[BeltTransmission]","category":"page"},{"location":"#BeltTransmission.BeltTransmission","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.BeltTransmission","text":"Geometric modeling of 2D closed belt transmissions.\n\nThis module models closed belt transmissions with either:\n\nPlain pulleys with flat belting\nTiming pulleys and timing belts\n\nWith the general concept of a 'belt' entailing a continuous element, flat and timing belts add properties that affect which method may be called.   For instance, a flat belt may have an arbitrary length, limited only by fabrication, while toothed belts are defined to have an integer number of teeth.   Likewise, calculations involving tooth pitch are nonsensical if applied to flat or V belts.   The module uses Julia's type system to differentiate between these belt types.\n\nTiming and plain pulleys are specializaitons of AbstractPulley, permitting functions that need only the pulley location, rotation axis, or pitch diameter to accept any argument that maps to AbstractPulley, while allowing those needing tooth properties to specify arguments of TimingPulley type.\n\nCalculations are perfomed on the pulley or belt pitch line.\n\nExports methods:\n\nAbstractPulley\nBeltSystem\nFreeSegment\nOptimizer\nPlainPulley\nSynchronousBelt\nSynchronousBeltTable\nSynchronousPulley\ncalculateBeltLength\ncalculateLength\ncalculateRatio\ncalculateRatios\ncalculateRouteAngles\ncalculateWrappedAngle\ncalculateWrappedLength\ndistance\nfindTangents\ngetArrivalPoint\ngetDeparturePoint\nisSegmentMutuallyTangent\nlength\nnGrooves2Length\nnGrooves2Radius\nnTeeth2PitchLength\npitchLength\npitchLength2NTeeth\nprintPulley\nprintRoute\nprintSegments\npulley2Circle\npulley2String\nradius2NGrooves\nroute2Segments\ntoString\ntoStringPoints\ntoStringShort\n\n\n\n\n\n","category":"module"},{"location":"#BeltTransmission.AbstractFreeSegment","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.AbstractFreeSegment","text":"Subtypes of AbstractFreeSegment model free belt segments beginning at the departure point traveling towards the arrive point under postive motion.\n\n\n\n\n\n","category":"type"},{"location":"#BeltTransmission.AbstractPulley","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.AbstractPulley","text":"Subtypes of AbstractPulley model a particular form of pulley.   At present that includes PlainPulleys, having cylindrical faces, and SynchronousPulley.   All subtypes have basic fields of pitch::Circle, axis::UnitVector, arrive::Angle, depart::Angle, and a name::String.\n\n\n\n\n\n","category":"type"},{"location":"#BeltTransmission.BeltSystem","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.BeltSystem","text":"A BeltSystem is an ordered set of pulleys connected by segments of some belt.\n\npulleys::Vector{AbstractPulley}\nsegments::Vector{BeltTransmission.AbstractSegment}\nbelt::BeltTransmission.AbstractBelt\n\n\n\n\n\n","category":"type"},{"location":"#BeltTransmission.BeltSystem-Tuple{Vector{AbstractPulley}, BeltTransmission.AbstractBelt}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.BeltSystem","text":"BeltSystem(\n    pulleys::Vector{AbstractPulley},\n    belt::BeltTransmission.AbstractBelt\n) -> BeltSystem\n\n\nConstruct a new BeltSystem, creating segments from pulleys and belt.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.FreeSegment","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.FreeSegment","text":"Describes a belt segment between depart and arrive Pulleys.\n\ndepart\nDeparting pulley\narrive\nArriving pulley\n\n\n\n\n\n","category":"type"},{"location":"#BeltTransmission.PlainPulley","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.PlainPulley","text":"Models a cylindrical plain pulley in a BeltTransmission with:\n\npitch\nthe pitch Circle\naxis\nthe rotation axis for the pulley with +/- defining the 'positive' rotation direction\narrive\nangle of the radial vector of the belt's point of arrival\ndepart\nangle of the radial vector of the belt's point of departure\nname\nconvenience name of the pulley\n\n\n\n\n\n","category":"type"},{"location":"#BeltTransmission.PlainPulley-2","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.PlainPulley","text":"PlainPulley(pp::PlainPulley, arrive=0u\"rad\", depart=0u\"rad\")\n\nCopy constructor setting arrive and depart.\n\n\n\n\n\n","category":"type"},{"location":"#BeltTransmission.PlainPulley-Tuple{Geometry2D.Circle, Geometry2D.UnitVector, String}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.PlainPulley","text":"PlainPulley(pitch::Geometry2D.Circle, axis::Geometry2D.UnitVector, name::String)\n\nModels a PlainPulley in a BeltTransmission, described by a circle, rotation axis, and name.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.SynchronousBelt","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.SynchronousBelt","text":"Represents a synchronous belt with parameters:   profile::String - tooth profile name   pitch::Unitful.Length - distance between belt grooves   length::Unitful.Length - belt linear length if cut   nTeeth::Int - number of teeth over the length   width::Unitful.Length - belt width   partNumber::String - reference name   supplier::String - reference name   url::String - sourcing link   id::UUID - unique id\n\n\n\n\n\n","category":"type"},{"location":"#BeltTransmission.SynchronousBelt-Tuple{SynchronousBelt}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.SynchronousBelt","text":"SynchronousBelt( belt::SynchronousBelt; partNumber=\"\", supplier=\"\", url=\"\" ) :: SynchronousBelt A copy constructor for adding/changing partNumber, supplier, or url.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.SynchronousPulley","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.SynchronousPulley","text":"SynchronousPulley(sp::SynchronousPulley, arrive=0u\"rad\", depart=0u\"rad\")\n\nA copy constructor for setting the arrive and depart angles.\n\n\n\n\n\n","category":"type"},{"location":"#BeltTransmission.SynchronousPulley-2","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.SynchronousPulley","text":"Models a SynchronousPulley in a BeltTransmission, described by a pitch circle, rotation axis, and beltPitch.\n\npitch\nCircle describing the pulley pitch diameter.\naxis\nThe rotation axis for the pulley with +/- defining the 'positive' rotation direction.\nbeltPitch\nDistance between belt teeth\narrive\nAngle of the radial vector of the belt's point of arrival.\ndepart\nAngle of the radial vector of the belt's point of departure.\nname\nConvenience name of the pulley.\n\n\n\n\n\n","category":"type"},{"location":"#BeltTransmission.SynchronousPulley-Tuple{Geometry2D.Point, Geometry2D.UnitVector, Integer, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, String}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.SynchronousPulley","text":"SynchronousPulley(center::Geometry2D.Point, axis::Geometry2D.UnitVector, nGrooves::Integer, beltPitch::Unitful.Length, name::String)\n\nModels a SynchronousPulley in a BeltTransmission located at center rotating about axis with nGrooves(=nTeeth) spaced with arc length beltPitch and covenience name.\n\n\n\n\n\n","category":"method"},{"location":"#Base.length-Tuple{FreeSegment}","page":"Modeling Planar Belt Transmissions","title":"Base.length","text":"Base.length(seg::FreeSegment) :: Unitful.Length\n\nReturns the straight-line distance or length of FreeSegment seg via distance.\n\n\n\n\n\n","category":"method"},{"location":"#Base.show-Tuple{IO, AbstractPulley}","page":"Modeling Planar Belt Transmissions","title":"Base.show","text":"Base.show(io::IO, p::AbstractPulley)\n\nFunction to show() a AbstractPulley via pulley2String.\n\n\n\n\n\n","category":"method"},{"location":"#Base.show-Tuple{IO, FreeSegment}","page":"Modeling Planar Belt Transmissions","title":"Base.show","text":"Base.show(io::IO, seg::FreeSegment)\n\nshow()s the FreeSegment via toStringShort.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.calculateBeltLength-Tuple{Vector{FreeSegment}}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.calculateBeltLength","text":"calculateBeltLength(segments::Vector{FreeSegment}) :: Unitful.Length\n\nCalculates the belt length over the given route as the sum of straight Segments.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.calculateBeltLength-Union{Tuple{Vector{T}}, Tuple{T}} where T<:AbstractPulley","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.calculateBeltLength","text":"calculateBeltLength(route::Vector{AbstractPulley}) :: Unitful.Length\n\nCalculates the belt length over the given route as the sum of circular sections at the pulley pitch radii between the arrival and departure angles.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.calculateCenterDistance-Tuple{BeltSystem, Integer}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.calculateCenterDistance","text":"calculateCenterDistance(bs::BeltSystem, which::Integer)\n\n\nGiven a belt system, find the pulley position(s) that satisfy the given belt length.   It does this through a linear optmization whose objective is to minimze the error between the given belt's length and the calculateBeltLength().   Since pulleys can each move in <x,y>, the \n\nwhich is an index or array to the pulley(s) that may be moved; by default all pulleys may be moved and the algorithm minimizes the total pulley movement.   The pulleys in the belt system need to be placed in approximate locations in order to determine the belt routing.   That is even if their positions are not final some position must be given when creating the pulleys to permit the belt length to be accurately calculated.   Pulleys are constrained from overlap\n\nIn a two-belt system this problem devolves to calculating the center distance between two pulleys:   '''@example\n\n'''\n\nIn larger systems, \n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.calculateLength-Tuple{BeltSystem}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.calculateLength","text":"calculateLength(\n    bs::BeltSystem\n) -> Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}\n\n\nPass-through to calculateBeltLength.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.calculateRatio-Union{Tuple{U}, Tuple{T}, Tuple{T, U}} where {T<:AbstractPulley, U<:AbstractPulley}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.calculateRatio","text":"calculateRatio(\n    driving::AbstractPulley,\n    driven::AbstractPulley\n) -> Real\n\n\nCalculate the transmission ratio between pulleys driving and driven, with the ratio defined as driven/driving, being >1 when the driven pulley rotates more than the driving and <1 less.   This can be developed from the belt translation or velocity, as:\n\nxBelt = thA*rA = thB * rB; thB = thA * rA/rB\nvBelt = wA*rA = wB*rB; wB = wA * rA/rB\n\nPulleys having a positive transmission ratio rotate in the same direction, negative opposing.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.calculateRatios-Tuple{BeltSystem}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.calculateRatios","text":"calculateRatios(bs::BeltSystem) -> Matrix{Float64}\n\n\nCalculate the transmission ratio matrix between all pulleys, returning a matrix of ratios.   Pulleys are numbered according to their order in bs, with the ratio as in calculateRatio.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.calculateRatios-Union{Tuple{Vector{T}}, Tuple{T}} where T<:AbstractPulley","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.calculateRatios","text":"calculateRatios(\n    pulleys::Array{T<:AbstractPulley, 1}\n) -> Matrix{Float64}\n\n\nCalculate the transmission ratio matrix between all pulleys, returning a matrix of ratios.   Pulleys are numbered according to their order in pulleys, with the ratio as in calculateRatio.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.calculateRouteAngles-Union{Tuple{Vector{T}}, Tuple{T}} where T<:AbstractPulley","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.calculateRouteAngles","text":"calculateRouteAngles(route::Vector{AbstractPulley}, plotSegments::Bool=false) :: Vector{AbstractPulley}\n\nGiven an ordered vector of Pulleys, output a vector of new Pulleys whose arrive and depart angles are set to connect the pulleys with mutually tangent segments.   Convention: pulleys are listed in 'positive' belt rotation order, consistent with the direction of each pulley's rotation axis.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.calculateWrappedAngle-Tuple{AbstractPulley}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.calculateWrappedAngle","text":"calculateWrappedAngle(p::AbstractPulley) :: Geometry2D.Angle\n\nGiven p, calculate the wrapped angle from p.arrive to p.depart.   Note that the wrapped angle is not restricted to <= 1 revolution, as the pulley may be wrapped multiple times.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.calculateWrappedLength-Tuple{AbstractPulley}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.calculateWrappedLength","text":"calculateWrappedLength(p::AbstractPulley) :: Unitful.Length\n\nGiven p, calculate the arclength of the wrapped segment from p.arrive to p.depart   Note that the wrapped length is not restricted to <= 1 revolution, as the pulley may be wrapped multiple times.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.findTangents-Tuple{FreeSegment}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.findTangents","text":"findTangents(seg::FreeSegment) :: Vector{FreeSegment}\n\nFind four lines tangent to both pulleys a and b, returns 4 Segments with departure and arrival angles locating the points of tangency on the circles.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.getArrivalPoint-Tuple{AbstractPulley}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.getArrivalPoint","text":"getArrivalPoint(p::AbstractPulley)::Geometry2D.Point\n\nReturns the point of arrival.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.getArrivalPoint-Tuple{FreeSegment}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.getArrivalPoint","text":"getArrivalPoint(seg::FreeSegment) :: Geometry2D.Point\n\nReturns the arrival Geometry2D.Point of seg.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.getDeparturePoint-Tuple{AbstractPulley}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.getDeparturePoint","text":"getDeparturePoint(p::AbstractPulley)::Geometry2D.Point\n\nReturns the point of departure.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.getDeparturePoint-Tuple{FreeSegment}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.getDeparturePoint","text":"getDeparturePoint(seg::FreeSegment) :: Geometry2D.Point\n\nReturns the departure Geometry2D.Point of seg.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.isSegmentMutuallyTangent-Tuple{FreeSegment}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.isSegmentMutuallyTangent","text":"isSegmentMutuallyTangent( seg::FreeSegment ) :: Bool\n\nDetermines whether the departure and arrival points are tangent to the connecting belt segment.\n\nFor a segment a->b between ai&bi; the correct arrival and departure angles will have cross products that match both axes,   (ra-a1)x(a1-b1) = ax1 && (rb-b1)x(a1-b1) = bx1, all others should be false.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.nGrooves2Length-Tuple{Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Integer}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.nGrooves2Length","text":"nGrooves2Length(pitch::Unitful.Length, nGrooves::Integer)::Unitful.Length\n\nConvert the pitch and nGrooves to the circumferential length.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.nGrooves2Radius-Tuple{Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Integer}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.nGrooves2Radius","text":"nGrooves2Radius(pitch::Unitful.Length, nGrooves::Integer)::Unitful.Length\n\nConvert the pitch and nGrooves to the pitch radius.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.nTeeth2PitchLength-Tuple{}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.nTeeth2PitchLength","text":"nTeeth2PitchLength(; pitch::Unitful.Length, nTeeth::Integer) :: Unitful.Length\n\nBelt length is pitch * nTeeth.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.pitchLength-Tuple{AbstractPulley}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.pitchLength","text":"pitchLength(p::AbstractPulley) :: Unitful.Length\n\nReturns the circumferential length of the pitch diameter of the pulley.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.pitchLength2NTeeth-Tuple{}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.pitchLength2NTeeth","text":"pitchLength2NTeeth(; pitch::Unitful.Length, length::Unitful.Length )::Integer\n\nnTeeth is simply length/pitch.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.printPulley-Tuple{AbstractPulley}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.printPulley","text":"printPulley(p::AbstractPulley)\n\nPrints the result of pulley2String to the standard output\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.printRoute-Union{Tuple{Vector{T}}, Tuple{T}} where T<:AbstractPulley","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.printRoute","text":"printRoute(route::Vector{AbstractPulley})\n\nPrints the Pulleys and total belt length for the given route.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.printSegments-Union{Tuple{Vector{T}}, Tuple{T}} where T<:BeltTransmission.AbstractSegment","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.printSegments","text":"printSegments(segments::Vector{FreeSegment})\n\nPrints the Segments, and total belt length for the given route.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.pulley2Circle-Tuple{AbstractPulley}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.pulley2Circle","text":"pulley2Circle(p::AbstractPulley) :: Geometry2D.Circle\n\nReturns the pitch Circle of p.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.pulley2String-Tuple{PlainPulley}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.pulley2String","text":"pulley2String(p::PlainPulley) :: String\n\nReturns a descriptive string of the given PlainPulley p of the form:     PlainPulley[struct] @ [1.000mm,2.000mm] r[3.000mm] arrive[57.296°] depart[114.592°] aWrap[57.296°] lWrap[3.000mm]\"\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.pulley2String-Tuple{SynchronousPulley}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.pulley2String","text":"pulley2String(p::SynchronousPulley) :: String\n\nReturns a descriptive string of the given SynchronousPulley p of the form:     SynchronousPulley[struct] @ [1.000mm,2.000mm] r[3.000mm] arrive[57.296°] depart[114.592°] aWrap[57.296°] lWrap[3.000mm]\"\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.radius2NGrooves-Tuple{SynchronousPulley}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.radius2NGrooves","text":"radius2NGrooves(p::SynchronousPulley)::Integer\nradius2NGrooves(pitch::Unitful.Length, radius::Unitful.Length)::Integer\n\nConvert the pitch and radius to the number of grooves.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.route2Segments-Union{Tuple{Vector{T}}, Tuple{T}} where T<:AbstractPulley","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.route2Segments","text":"route2Segments(route::Vector{AbstractPulley}) :: Vector{FreeSegment}\n\nGiven the ordered Pulleys of a belt routing, returns a vector of the free-space Segments connecting the Pulleys.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.toString-Tuple{FreeSegment}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.toString","text":"toString(seg::FreeSegment) :: String\n\nCalls toStringShort.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.toStringPoints-Tuple{FreeSegment}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.toStringPoints","text":"toStringPoints(seg::FreeSegment) :: String\n\nCreates strings like:     FreeSegment: depart[E] [-0.013m, 0.012m] –> arrive[A] [0.110m, 0.083m] l[0.142m]@[29.973°]\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.toStringShort-Tuple{FreeSegment}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.toStringShort","text":"toStringShort(seg::FreeSegment) :: String\n\nReturns a short string of the form 'A – B', for a departing pulley named A arriving at a pulley named B.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.distance-Tuple{FreeSegment}","page":"Modeling Planar Belt Transmissions","title":"Geometry2D.distance","text":"distance(seg::FreeSegment) :: Unitful.Length\n\nReturns the straight-line distance or length of FreeSegment seg.\n\n\n\n\n\n","category":"method"},{"location":"#KeywordDispatch.kwcall-Union{Tuple{var\"#36#T\"}, Tuple{U}, Tuple{T}, Tuple{NamedTuple{(:arrive, :depart), var\"#36#T\"}, Type{FreeSegment}}} where {T<:AbstractPulley, U<:AbstractPulley, var\"#36#T\"<:Tuple{U, T}}","page":"Modeling Planar Belt Transmissions","title":"KeywordDispatch.kwcall","text":"FreeSegment(; depart::AbstractPulley, arrive::AbstractPulley) :: FreeSegment\n\nCreate a belt FreeSegment between depart and arrive Pulleys\n\n\n\n\n\n","category":"method"},{"location":"#KeywordDispatch.kwcall-Union{Tuple{var\"#45#T\"}, Tuple{NamedTuple{(:axis, :name, :pitch), var\"#45#T\"}, Type{PlainPulley}}} where var\"#45#T\"<:Tuple{Geometry2D.UnitVector, String, Geometry2D.Circle}","page":"Modeling Planar Belt Transmissions","title":"KeywordDispatch.kwcall","text":"PlainPulley(; pitch::Geometry2D.Circle, axis::Geometry2D.UnitVector, name::String) \nPlainPulley(; pitch::Geometry2D.Circle, axis::Geometry2D.UnitVector, arrive::Geometry2D.Radian, depart::Geometry2D.Radian, name::String)\n\nModels a PlainPulley in a BeltTransmission through keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#KeywordDispatch.kwcall-Union{Tuple{var\"#54#T\"}, Tuple{NamedTuple{(:id, :length, :nTeeth, :partNumber, :pitch, :profile, :supplier, :url, :width), var\"#54#T\"}, Type{SynchronousBelt}}} where var\"#54#T\"<:Tuple{Base.UUID, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Int64, String, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, String, String, String, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}","page":"Modeling Planar Belt Transmissions","title":"KeywordDispatch.kwcall","text":"SynchronousBelt(; pitch::Unitful.Length, length::Unitful.Length, nTeeth::Int,  width::Unitful.Length, profile::String, partNumber::String, supplier::String, url::String, id::UUID )\nSynchronousBelt(; pitch::Unitful.Length, length::Unitful.Length,               width::Unitful.Length, profile::String)\nSynchronousBelt(; pitch::Unitful.Length,                         nTeeth::Int,  width::Unitful.Length, profile::String)\n\nCreates a SynchronousBelt with tooth pitch, overall length, nTeeth, belt width and profile name.\n\n\n\n\n\n","category":"method"},{"location":"#KeywordDispatch.kwcall-Union{Tuple{var\"#65#T\"}, Tuple{NamedTuple{(:arrive, :axis, :beltPitch, :center, :depart, :nGrooves, :name), var\"#65#T\"}, Type{SynchronousPulley}}} where var\"#65#T\"<:Tuple{Union{Unitful.Quantity{T, NoDims, U}, Unitful.Level{L, S, Unitful.Quantity{T, NoDims, U}} where {L, S}} where {T, U}, Geometry2D.UnitVector, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Geometry2D.Point, Union{Unitful.Quantity{T, NoDims, U}, Unitful.Level{L, S, Unitful.Quantity{T, NoDims, U}} where {L, S}} where {T, U}, Integer, String}","page":"Modeling Planar Belt Transmissions","title":"KeywordDispatch.kwcall","text":"SynchronousPulley(; center::Geometry2D.Point, axis::Geometry2D.UnitVector, nGrooves::Integer, beltPitch::Unitful.Length, arrive::Geometry2D.Radian, depart::Geometry2D.Radian, name::String)\nSynchronousPulley(; center::Geometry2D.Point, axis::Geometry2D.UnitVector, nGrooves::Integer, beltPitch::Unitful.Length, name::String)\n\nModels a SynchronousPulley in a BeltTransmission, described by a circle, rotation axis, and name.   nGrooves and beltPitch are used to find the pulley pitch diameter.   The belt's arrive and depart angles are the polar angles about the pulley axis of the belt's arrival and departure contact points, usually found by calculateRouteAngles()\n\n\n\n\n\n","category":"method"},{"location":"#RecipesBase.apply_recipe-Tuple{AbstractDict{Symbol, Any}, FreeSegment}","page":"Modeling Planar Belt Transmissions","title":"RecipesBase.apply_recipe","text":"plotRecipe(seg::FreeSegment; n=2, lengthUnit=u\"mm\", segmentColor=:magenta, arrowFactor=0.03)\n\nPlot recipe to plot the free sections of a segment, does not plot the pulleys.   using Plots, Unitful, BeltTransmission, Geometry2D   a = PlainPulley( Geometry2D.Circle(1u\"mm\",2u\"mm\",3u\"mm\"), Geometry2D.uk, \"recipe\" )   b = PlainPulley( Geometry2D.Circle(10u\"mm\",2u\"mm\",3u\"mm\"), Geometry2D.uk, \"recipe\" )   seg = FreeSegment(depart=a, arrive=b)   plot(seg)\n\n\n\n\n\n","category":"method"},{"location":"#RecipesBase.apply_recipe-Tuple{AbstractDict{Symbol, Any}, PlainPulley}","page":"Modeling Planar Belt Transmissions","title":"RecipesBase.apply_recipe","text":"plotRecipe(p::PlainPulley; n=100, lengthUnit=u\"mm\", segmentColor=:magenta, arrowFactor=0.03)\n\nA plot recipe for plotting Pulleys under Plots.jl.   Keyword n can be used to increase the number of points constituting the pulley edge.   lengthUnit is a Unitful unit for scaling the linear axes.   arrowFactor controls the size of the arrow head at depart.   using Plots, Unitful, BeltTransmission, Geometry2D   p = PlainPulley( Geometry2D.Circle(1u\"mm\",2u\"mm\",3u\"mm\"), Geometry2D.uk, \"recipe\" )   plot(p)\n\n\n\n\n\n","category":"method"},{"location":"#RecipesBase.apply_recipe-Tuple{AbstractDict{Symbol, Any}, SynchronousPulley}","page":"Modeling Planar Belt Transmissions","title":"RecipesBase.apply_recipe","text":"plotRecipe(p::SynchronousPulley; n=100, lengthUnit=u\"mm\", segmentColor=:magenta, arrowFactor=0.03)\n\nA plot recipe for plotting Pulleys under Plots.jl.   Keyword n can be used to increase the number of points constituting the pulley edge.   lengthUnit is a Unitful unit for scaling the linear axes.   arrowFactor controls the size of the arrow head at depart.   using Plots, Unitful, BeltTransmission, Geometry2D   p = SynchronousPulley( Geometry2D.Circle(1u\"mm\",2u\"mm\",3u\"mm\"), Geometry2D.uk, \"recipe\" )   plot(p)\n\n\n\n\n\n","category":"method"},{"location":"#RecipesBase.apply_recipe-Union{Tuple{T}, Tuple{AbstractDict{Symbol, Any}, Vector{T}}, Tuple{AbstractDict{Symbol, Any}, Vector{T}, Any}, Tuple{AbstractDict{Symbol, Any}, Vector{T}, Any, Any}} where T<:AbstractPulley","page":"Modeling Planar Belt Transmissions","title":"RecipesBase.apply_recipe","text":"plotRecipe(route::Vector{PlainPulley})\n\nPlots the Pulleys in a route vector of Pulleys.   using Plots, Unitful, BeltTransmission, Geometry2D   a = PlainPulley( Geometry2D.Circle(1u\"mm\",2u\"mm\",3u\"mm\"), Geometry2D.uk, \"recipe\" )   b = PlainPulley( Geometry2D.Circle(10u\"mm\",2u\"mm\",3u\"mm\"), Geometry2D.uk, \"recipe\" )   route = calculateRouteAngles([a,b])   plot(route)\n\n\n\n\n\n","category":"method"},{"location":"#RecipesBase.apply_recipe-Union{Tuple{T}, Tuple{AbstractDict{Symbol, Any}, Vector{T}}, Tuple{AbstractDict{Symbol, Any}, Vector{T}, Any}, Tuple{AbstractDict{Symbol, Any}, Vector{T}, Any, Any}} where T<:BeltTransmission.AbstractSegment","page":"Modeling Planar Belt Transmissions","title":"RecipesBase.apply_recipe","text":"plotRecipe(segments::Vector{T}) where T<:AbstractSegment\n\nPlots the Pulleys and Segments in a route vector.   using Plots, Unitful, BeltTransmission, Geometry2D   a = PlainPulley( Geometry2D.Circle(1u\"mm\",2u\"mm\",3u\"mm\"), Geometry2D.uk, \"recipe\" )   b = PlainPulley( Geometry2D.Circle(10u\"mm\",2u\"mm\",3u\"mm\"), Geometry2D.uk, \"recipe\" )   route = calculateRouteAngles([a,b])   segments = route2Segments(route)   plot(segments)\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.SynchronousBeltTable","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.SynchronousBeltTable","text":"","category":"section"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"CurrentModule= BeltTransmission.SynchronousBeltTable","category":"page"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"Modules=[BeltTransmission.SynchronousBeltTable]","category":"page"},{"location":"#BeltTransmission.SynchronousBeltTable","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.SynchronousBeltTable","text":"Reads, writes, and generates CSVs that represent catalogs of synchronous belts, having headers:     toothProfile - trade name of the tooth profile, eg gt2, gt3, mxl, ...     pitchMM - tooth spacing     nTeeth - number of teeth about the closed belt     lengthMM - circumferential belt length     widthMM - belt width     id - a UUID4 unique identifier     partNumber - manufacturer or supplier part number     supplier - supplier name     url - link to the data source\n\nBasic usage:\n\nGenerate a DataFrame of belts:   @julia   using BeltTransmission   belts = SynchronousBeltTable.generateBeltDataFrame(pitch=2u\"mm\", width=6u\"mm\", toothRange=10:5:30)   Write these to a CSV:   @repl   SynchronousBeltTable.writeBeltCSV(belts, \"gt2Belts.csv\")\n\nThis creates a CSV file at the given path, with format   profile,pitchMM,nTeeth,lengthMM,widthMM,id,partNumber,supplier,url   gt2,2,10,20,6,3a9ee2fa-95a2-4217-b5c6-4bde0d9c65c9,pn0,none,none   gt2,2,15,30,6,319f2899-b714-43a4-b37c-830179524311,pn0,none,none   gt2,2,20,40,6,7e15cab0-58f2-4c4e-be0b-f168d1091ce9,pn0,none,none   gt2,2,25,50,6,6f5fcd44-26f0-44c7-bf38-5aea52c51dd1,pn0,none,none   gt2,2,30,60,6,ce84bc3b-4025-4de1-b79c-f536f9e95794,pn0,none,none\n\n(note the UUID ids will differ).\n\nThis file can then be read in   @repl   beltsdf = SynchronousBeltTable.readBeltCSVIntoDataFrame(\"gt2Belts.csv\")\n\nThe table of belts can be filtered by   @repl   filtered = SynchronousBeltTable.lookupLength(beltsdf, 35u\"mm\", n=2)   to get the top two belts nearest the desired length.\n\nThese can be converted into SynchronousBelts by   @repl   sync = SynchronousBeltTable.dfRow2SyncBelt( filtered[1,:] )\n\n\n\n\n\n","category":"module"},{"location":"#BeltTransmission.SynchronousBeltTable.AbstractOptimizableBelt","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.SynchronousBeltTable.AbstractOptimizableBelt","text":"An abstract belt type for belt optimization\n\n\n\n\n\n","category":"type"},{"location":"#BeltTransmission.SynchronousBeltTable.dfRow-Tuple{SynchronousBelt}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.SynchronousBeltTable.dfRow","text":"dfRow( sb::SynchronousBelt)\n\nConverts a SynchronousBelt into a DataFrame row.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.SynchronousBeltTable.dfRow2SyncBelt-Tuple{DataFrames.DataFrameRow}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.SynchronousBeltTable.dfRow2SyncBelt","text":"dfRow2SyncBelt( row::DataFrames.DataFrameRow )\n\nConverts a DataFrame row to a SynchronousBelt struct.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.SynchronousBeltTable.generateBeltDataFrame-Tuple{}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.SynchronousBeltTable.generateBeltDataFrame","text":"generateBeltDataFrame(; pitch::Unitful.Length, width::Unitful.Length, toothRange)\n\nGenerates a belt DataFrame with a given pitch and width over toothRange.   toothRange can be specified as toothRange=20:5:200 to create a tooth range array starting with 20 teeth, then proceeding to 200 teeth in 5-tooth increments.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.SynchronousBeltTable.lookupLength-Tuple{DataFrames.DataFrame, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.SynchronousBeltTable.lookupLength","text":"Given a desired belt length, return a vector of the closest options from the belts dataframe for the given pitch and width. If n = 1 the single nearest result is returned, else a DataFrame sorted by abs(length error).\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.SynchronousBeltTable.readBeltCSVIntoDataFrame-Tuple{String}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.SynchronousBeltTable.readBeltCSVIntoDataFrame","text":"readBeltCSVIntoDataFrame(csvPath::String)\n\nReturns a dataframe with the belt information from the given csvPath belt description file.   See writeBeltCSV for the file format.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.SynchronousBeltTable.writeBeltCSV-Tuple{DataFrames.DataFrame, String}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.SynchronousBeltTable.writeBeltCSV","text":"writeBeltCSV(belts::DataFrame, csvPath::String )\n\nGiven a belts DataFrame describing one or more belts, write that to the csvPath file.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.Optimizer","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.Optimizer","text":"","category":"section"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"Pulley locations and radii can be optimized via the Optimizer.","category":"page"},{"location":"#Optimizer-example","page":"Modeling Planar Belt Transmissions","title":"Optimizer example","text":"","category":"section"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"This example moves and resizes pulleys to achieve a given belt length. We start with the initial system which has a belt length of 1050mm.","category":"page"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"using Unitful, Plots\nusing Geometry2D \nusing BeltTransmission\n\nuk = Geometry2D.UnitVector(0,0,1)\n#a square of pulleys, arranged ccw from quadrant1\npA = SynchronousPulley( center=Geometry2D.Point( 100u\"mm\", 100u\"mm\"), axis=uk, nGrooves=62, beltPitch=2u\"mm\", name=\"1A\" )\npB = SynchronousPulley( center=Geometry2D.Point(-100u\"mm\", 100u\"mm\"), axis=uk, nGrooves=30, beltPitch=2u\"mm\", name=\"2B\" )\npC = SynchronousPulley( center=Geometry2D.Point(-100u\"mm\",-100u\"mm\"), axis=uk, nGrooves=80, beltPitch=2u\"mm\", name=\"3C\" )\npD = SynchronousPulley( center=Geometry2D.Point( 100u\"mm\",-100u\"mm\"), axis=uk, nGrooves=30, beltPitch=2u\"mm\", name=\"4D\" )\npE = PlainPulley( pitch=Geometry2D.Circle(   0u\"mm\",   0u\"mm\", 14u\"mm\"), axis=-uk, name=\"5E\") # -uk axis engages the backside of the belt\n\nsolved0 = BeltTransmission.calculateRouteAngles( [pA, pB, pC, pD, pE] )\nl0 = BeltTransmission.calculateBeltLength(solved0)","category":"page"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"Next, we add an available belt for this system.","category":"page"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"# Initially the belt length is 1050mm. Reduce that to force the pulleys to move.\npitch = 8u\"mm\"\nl = 1000u\"mm\"\nn = Int(round(ustrip(l/pitch)))\nbelt = BeltTransmission.SynchronousBelt(pitch=pitch, nTeeth=n, width=6u\"mm\", profile=\"gt2\")\nprintln(\"Closest belt is $belt\")","category":"page"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"While this is a bit trivial, this is where a BeltTable belt can be used.  Now we indicate which system variables are allowed to change, and their acceptable ranges.","category":"page"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"pRoute = [pA, pB, pC, pD, pE]\ncfg = BeltTransmission.Optimizer.Config(belt, pRoute, 4)\nBeltTransmission.Optimizer.addVariable!(cfg, pA, BeltTransmission.Optimizer.xPosition, low=60, start=100.1, up=113  )\nBeltTransmission.Optimizer.addVariable!(cfg, pA, BeltTransmission.Optimizer.yPosition, low=90, start=100.2, up=111  )\nBeltTransmission.Optimizer.addVariable!(cfg, pB, BeltTransmission.Optimizer.yPosition, low=90, start=100.3, up=112  )\nBeltTransmission.Optimizer.addVariable!(cfg, pC, BeltTransmission.Optimizer.radius, low=20, start=25, up=95  )\n\nsolved = BeltTransmission.Optimizer.solveSystem(cfg)\np = plot(solved0, segmentColor=:magenta)\np = plot!(solved, segmentColor=:yellow)","category":"page"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"Here, the initial, unavailable belt length is plotted in magenta, with the optimization to the available belt in yellow. Solving the system minimizes the difference between the given belt's length and that of the most recent system iteration. Note that each variable was utilized, as the optimization generally spreads the task between the available freedoms. The ranges set in each addVariable! provide an ability to fine-tune the solution as desired.","category":"page"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"Infeasible systems will return warnings like:","category":"page"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"Optimizer could not achieve the desired belt length given other constraints, desired[] vs solved[]. Try reducing the number of constraints or expanding their range.\nOptimizer stopped prior to completion, consider changing the starting point or constraints.","category":"page"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"The latter indicates that somewhere along the optimization the calculation of the system's belt length ran into an error. This error was probably reported elsewhere in the output, but likely results from the overlapping of two pulleys, or the movement of one pulley such that the belt cannot touch it.","category":"page"},{"location":"#API","page":"Modeling Planar Belt Transmissions","title":"API","text":"","category":"section"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"Modules=[BeltTransmission.Optimizer]","category":"page"},{"location":"#BeltTransmission.Optimizer","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.Optimizer","text":"Provides functions for optimizing belt transmissions according to various metrics.\n\n\n\n\n\n","category":"module"},{"location":"#BeltTransmission.Optimizer.Config","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.Optimizer.Config","text":"The Config struct holds optimization configuration options and system information.\n\nbelt::BeltTransmission.AbstractBelt\nBelt information\nrouting::Vector{AbstractPulley}\nRouting of the belt through the pulleys.\npulley::Vector{AbstractPulley}\nVector of pulleys to be optimized, set via addVariable.\nvariable::Vector{BeltTransmission.Optimizer.OptimizationVariable}\nVector of variables on each pulley be optimized, set via addVariable.\nstart::Vector{Real}\nVector of start values of each variable, set via addVariable.\nlower::Vector{Real}\nVector of lower bounds of each variable, set via addVariable.\nupper::Vector{Real}\nVector of upper bounds of each variable, set via addVariable.\nnlOptions::NLopt.Opt\nOptions for the NLOpt optimization algorithm, see NLOpt's documentation.\n\n\n\n\n\n","category":"type"},{"location":"#BeltTransmission.Optimizer.Config-Tuple{BeltTransmission.AbstractBelt, Vector{AbstractPulley}, Int64}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.Optimizer.Config","text":"Config(\n    belt::BeltTransmission.AbstractBelt,\n    routing::Vector{AbstractPulley},\n    nConstraints::Int64\n) -> BeltTransmission.Optimizer.Config\n\n\nConstructor of Config objects, sets default optimization options in the .nlOptions field.   nConstraints is the number of constraints that will be added through addVariable.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.Optimizer.OptimizationVariable","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.Optimizer.OptimizationVariable","text":"Enum defining optimizable entities as:\n\nxPosition = the x position of the pulley center\nyPosition = the y position of the pulley center\nradius = the pulley pitch radius\n\n\n\n\n\n","category":"type"},{"location":"#BeltTransmission.Optimizer.addVariable!-Tuple{BeltTransmission.Optimizer.Config, AbstractPulley, BeltTransmission.Optimizer.OptimizationVariable}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.Optimizer.addVariable!","text":"addVariable!(\n    opts::BeltTransmission.Optimizer.Config,\n    pulley::AbstractPulley,\n    variable::BeltTransmission.Optimizer.OptimizationVariable;\n    low,\n    start,\n    up\n)\n\n\nAdds variable on pulley to the list of entities to optimize over.   solveSystem will evaluate values of the variable, starting at start, between low and up.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.Optimizer.lookupPulley-Tuple{Vector{AbstractPulley}, AbstractPulley}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.Optimizer.lookupPulley","text":"lookupPulley(\n    routing::Vector{AbstractPulley},\n    p::AbstractPulley\n) -> Int64\n\n\nFind the index of p in routing.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.Optimizer.solveSystem-Tuple{BeltTransmission.Optimizer.Config}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.Optimizer.solveSystem","text":"solveSystem(opts::BeltTransmission.Optimizer.Config) -> Any\n\n\nSolves the system descriped by opts, returning the solved system.  \n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.Optimizer.x2route-Union{Tuple{T}, Tuple{BeltTransmission.Optimizer.Config, Vector{T}}} where T<:Real","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.Optimizer.x2route","text":"x2route(\n    opts::BeltTransmission.Optimizer.Config,\n    ox::Array{T<:Real, 1}\n) -> Vector{AbstractPulley}\n\n\nConverts optmization vector ox into a solved belt system via the system description in opts.\n\n\n\n\n\n","category":"method"},{"location":"beltDesign/#Belt-Design-example","page":"Belt Design example","title":"Belt Design example","text":"","category":"section"},{"location":"beltDesign/","page":"Belt Design example","title":"Belt Design example","text":"In this example we want to choose which Synchronous belt will fit a given pulley arrangement.","category":"page"},{"location":"beltDesign/","page":"Belt Design example","title":"Belt Design example","text":"# BasicBeltDesign.jl\n# This example of BeltTransmission.jl solves a system of 5 pulleys, finding the belt length, idler position, angle of wrap on each pulley, and the transmission ratio matrix.\n\nusing Plots #everything ends up as a plot\n\n#dependencies for function arguments\nusing Unitful, Unitful.DefaultSymbols\nimport Geometry2D\n\n#bring this module in\nusing BeltTransmission\n\n#describe the pulleys\nuk = Geometry2D.UnitVector(0,0,1)\n#a square of pulleys, arranged ccw from quadrant1\npA = SynchronousPulley( center=Geometry2D.Point( 100mm, 100mm), axis=uk, nGrooves=62, beltPitch=2mm, name=\"Drive\" )\npB = SynchronousPulley( center=Geometry2D.Point(-100mm, 100mm), axis=uk, nGrooves=30, beltPitch=2mm, name=\"B\" )\npC = SynchronousPulley( center=Geometry2D.Point(-100mm,-100mm), axis=uk, nGrooves=80, beltPitch=2mm, name=\"C\" )\npD = SynchronousPulley( center=Geometry2D.Point( 100mm,-100mm), axis=uk, nGrooves=30, beltPitch=2mm, name=\"D\" )\npE = PlainPulley( pitch=Geometry2D.Circle(   0u\"mm\",   0u\"mm\", 14u\"mm\"), axis=-uk, name=\"Idler\") # -uk axis engages the backside of the belt\nroute = [pA, pB, pC, pD, pE]\n\n# solve the system\nsolved = calculateRouteAngles(route)\nprintln(\"Initial belt length is $(calculateBeltLength(solved))\")\n\n# plot the system\np = plot(solved, reuse=false)#, legend_background_color=:transparent, legend_position=:outerright)\ndisplay(p)\n\n# generate a catalog of GT2 belts\nbelts = SynchronousBeltTable.generateBeltDataFrame(pitch=2u\"mm\", width=6u\"mm\", toothRange=500:10:700)\n\n# filter by length\nbelt = SynchronousBeltTable.lookupLength( belts, calculateBeltLength(solved), pitch=2mm, width=6mm, n=1 )\nbelt = SynchronousBeltTable.dfRow2SyncBelt(belt) #convert out of DataFrame\n\n# the chosen belt is 1090mm long while the initial belt length is 1093.72mm. Calling E an idler, let's move it in X until the belt length is correct\n# See the JuMP example for a more advanced optimization, a for-loop suffices here\ndx = 1u\"mm\" #initial starting movement\nfor i = 1:100 #this is a gradient descent optimization https://en.wikipedia.org/wiki/Gradient_descent\n  global dx -= (belt.length - calculateBeltLength(solved) )/10 \n  global pE = PlainPulley( pitch=Geometry2D.Circle( 0u\"mm\" + dx,   0u\"mm\", 14u\"mm\"), axis=-uk, name=\"E\") \n  global route = [pA, pB, pC, pD, pE]\n  global solved = calculateRouteAngles(route)\n  # println(\"Iteration $i: l=$(calculateBeltLength(solved)) with dx=$dx\")\nend\nprintln(\"Iteration 100: l=$(calculateBeltLength(solved)) with dx=$dx\\n\")","category":"page"},{"location":"beltDesign/","page":"Belt Design example","title":"Belt Design example","text":"p = plot!(solved, segmentColor=:cyan)#, legend_background_color=:transparent, legend_position=:outerright)","category":"page"},{"location":"beltDesign/","page":"Belt Design example","title":"Belt Design example","text":"Here, the initial routing is shown with the magenta belt, and the fit to one of the available belt lengths in aqua. SynchronousPulleys are shown with dashed edges, hinting their teeth.","category":"page"},{"location":"beltDesign/#Outputs","page":"Belt Design example","title":"Outputs","text":"","category":"section"},{"location":"beltDesign/","page":"Belt Design example","title":"Belt Design example","text":"Having solved the system, various data can be output according to the design's needs. Of course these can be directly accessed in the solved array to drive custom plotting or other analyses. Printing the pulley information from the belt routing displays the positions of all elements, and the angles of wrap on each pulley:","category":"page"},{"location":"beltDesign/","page":"Belt Design example","title":"Belt Design example","text":"printRoute(solved)","category":"page"},{"location":"beltDesign/","page":"Belt Design example","title":"Belt Design example","text":"And we can print the points of departure and arrival of each segment, along with their length and angle:","category":"page"},{"location":"beltDesign/","page":"Belt Design example","title":"Belt Design example","text":"printSegments(route2Segments(solved))","category":"page"},{"location":"beltDesign/","page":"Belt Design example","title":"Belt Design example","text":"The transmission ratios between the pulleys, ordered A-E, are:","category":"page"},{"location":"beltDesign/","page":"Belt Design example","title":"Belt Design example","text":"calculateRatios(solved)","category":"page"},{"location":"beltDesign/","page":"Belt Design example","title":"Belt Design example","text":"With A being the top-right pulley, it is larger than B, top-left, and smaller than the C, lower-left, leading A:B=2.07 and A:C=0.78. Pulley E rotates in the opposite direction and has therefore a negative transmission ratio of -1.4 relative to A.","category":"page"}]
}
