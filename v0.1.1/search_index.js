var documenterSearchIndex = {"docs":
[{"location":"#Modeling-Planar-Belt-Transmissions","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"","category":"section"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"GitHub source","category":"page"},{"location":"#Background","page":"Modeling Planar Belt Transmissions","title":"Background","text":"","category":"section"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"Belt transmissions involve several moving elements and a variety of materials, enabling flexible power transmission but leading to complex and interdependent system design requirements. The basic performance of a candidate belt transmission can be estimated from kinematic analysis, while a dynamic simulation can give a much better idea of actual system performance and limits.","category":"page"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"This Julia package assists users in the kinematic analysis, designing belt transmissions using flat or synchronous belts. Primary structures model pulleys and belt segments, these can be analyzed and plotted through recipes for Plots.jl. BeltTransmission was used to determine the basic design of the Moover variants.","category":"page"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"See the package readme for release, license, and development information.","category":"page"},{"location":"#Installation","page":"Modeling Planar Belt Transmissions","title":"Installation","text":"","category":"section"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"using Pkg\nPkg.add(\"https://github.com/mechanomy/BeltTransmission.jl.git\")","category":"page"},{"location":"#Use-Cases","page":"Modeling Planar Belt Transmissions","title":"Use Cases","text":"","category":"section"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"Designing a planar belt transmission is the primary use case for BeltTransmission, but this design can have several objectives according to what is already known about the system. If the positions, sizes, and belt routing are known, these can be entered to calculate belt length and arrival and departure angles on each pulley. BeltTransmission can also be used to solve systems for other unknowns, say to determine the position of an idler pulley given a known belt length.","category":"page"},{"location":"#Basic-belt-transmissions","page":"Modeling Planar Belt Transmissions","title":"Basic belt transmissions","text":"","category":"section"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"The goal of these examples is to calculate the belt length given pulley sizes and locations.","category":"page"},{"location":"#Two-pulleys","page":"Modeling Planar Belt Transmissions","title":"Two pulleys","text":"","category":"section"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"using Unitful, Plots\nusing Geometry2D \nusing BeltTransmission\n\n#create the pulleys\nctrA = Geometry2D.Point(10u\"mm\", 10u\"mm\")\npA = PlainPulley( circle=Geometry2D.Circle( center=ctrA, radius=10u\"mm\"), axis=Geometry2D.UnitVector(0,0,1), name=\"A\")\npB = PlainPulley( circle=Geometry2D.Circle(100u\"mm\", 100u\"mm\", 20u\"mm\"), axis=Geometry2D.UnitVector(0,0,1), name=\"B\")\n\n#create the belt route\nroute = [pA, pB] #from A to B and back to A\n\n#solve the departure and arrival angles on each PlainPulley\nsolved = calculateRouteAngles(route)\n\n#create belt Segments between the Pulleys\nsegments = route2Segments(solved)\nbeltLength = calculateBeltLength(segments)\n\nplot(segments, title=\"two pulleys\")","category":"page"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"By convention, Pulleys having a positive rotation (+uk) have a dot at their center to indicate the vector's tip, while negative rotation is shown with an X for the arrow's fletching. Once solved, the system can be interrogated:","category":"page"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"calculateBeltLength(segments)","category":"page"},{"location":"#A-variety-of-pulleys","page":"Modeling Planar Belt Transmissions","title":"A variety of pulleys","text":"","category":"section"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"using Unitful, Plots\nusing Geometry2D \nusing BeltTransmission\n\n#create the pulleys\nctrA = Geometry2D.Point(10u\"mm\", 10u\"mm\")\npA = PlainPulley( circle=Geometry2D.Circle( center=ctrA, radius=10u\"mm\"), axis=Geometry2D.UnitVector(0,0,1), name=\"A\")\npB = PlainPulley( circle=Geometry2D.Circle(100u\"mm\",  20u\"mm\", 20u\"mm\"), axis=Geometry2D.UnitVector(0,0,1), name=\"B\")\npC = PlainPulley( circle=Geometry2D.Circle( 80u\"mm\",  40u\"mm\",  5u\"mm\"), axis=-Geometry2D.UnitVector(0,0,1), name=\"C\")\npD = PlainPulley( circle=Geometry2D.Circle(150u\"mm\",  40u\"mm\",  5u\"mm\"), axis=Geometry2D.UnitVector(0,0,1), name=\"D\")\npE = PlainPulley( circle=Geometry2D.Circle(100u\"mm\",  80u\"mm\",  5u\"mm\"), axis=Geometry2D.UnitVector(0,0,1), name=\"E\")\n\n#create the belt route\nroute = [pA, pB, pC, pD, pE]\n\n#solve the departure and arrival angles on each PlainPulley\nsolved = calculateRouteAngles(route)\n\n#create belt Segments between the Pulleys\nsegments = route2Segments(solved)\n\nplot(segments, title=\"Various Pulleys\" )","category":"page"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"calculateBeltLength(segments)","category":"page"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"printSegments(segments)","category":"page"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"Positive rotation of PlainPulley A will cause PlainPulley C to rotate negatively, hence the negative rotation axis on C. In addition to the PlainPulley rotation axis, the point of departure on each PlainPulley is given a slight arrow in the direction of positive belt rotation.","category":"page"},{"location":"#Multiple-systems","page":"Modeling Planar Belt Transmissions","title":"Multiple systems","text":"","category":"section"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"using Unitful, Plots\nusing Geometry2D \nusing BeltTransmission\n\n#create the pulleys\npA = PlainPulley( circle=Geometry2D.Circle( 10u\"mm\",  20u\"mm\", 20u\"mm\"), axis=Geometry2D.UnitVector(0,0,1), name=\"B\")\npB = PlainPulley( circle=Geometry2D.Circle(100u\"mm\",  20u\"mm\", 30u\"mm\"), axis=Geometry2D.UnitVector(0,0,1), name=\"B\")\n\npX = PlainPulley( circle=Geometry2D.Circle( 10u\"mm\",  20u\"mm\", 15u\"mm\"), axis=Geometry2D.UnitVector(0,0,1), name=\"X\")\npY = PlainPulley( circle=Geometry2D.Circle( 50u\"mm\",  80u\"mm\",  5u\"mm\"), axis=Geometry2D.UnitVector(0,0,1), name=\"Y\")\n\n#create the belt systems \nsegAB = route2Segments( calculateRouteAngles( [pA, pB] ))\nsegXY = route2Segments( calculateRouteAngles( [pX, pY] ))\n\nplot( segAB, title=\"Parallel Systems\", xlabel=\"[mm]\", ylabel=\"[mm]\", xlims=([-50,150]), ylims=([-50,100]), legend=false, dpi=100, size=(1000,500)) \nplot!(segXY, segmentColor=:cyan)","category":"page"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"PlainPulley body colors are assigned by the default colormap, but segmentColor may be used to control the belt segment color. Other Plots.jl attributes may be used as expected.","category":"page"},{"location":"#Development-Plan","page":"Modeling Planar Belt Transmissions","title":"Development Plan","text":"","category":"section"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"BeltTransmission.jl is under active development, enhancement requests are welcome.","category":"page"},{"location":"#API","page":"Modeling Planar Belt Transmissions","title":"API","text":"","category":"section"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"CurrentModule= BeltTransmission","category":"page"},{"location":"","page":"Modeling Planar Belt Transmissions","title":"Modeling Planar Belt Transmissions","text":"Modules=[BeltTransmission]","category":"page"},{"location":"#BeltTransmission.BeltTransmission","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.BeltTransmission","text":"Geometric modeling of 2D closed belt transmissions.\n\nThis module models closed belt transmissions with either:\n\nPlain pulleys with flat belting\nTiming pulleys and timing belts\n\nWith the general concept of a 'belt' entailing a continuous element, flat and timing belts add properties that affect which method may be called. For instance, a flat belt may have an arbitrary length, limited only by fabrication, while toothed belts are defined to have an integer number of teeth. Likewise, calculations involving tooth pitch are nonsensical if applied to flat or V belts. The module uses Julia's type system to differentiate between these belt types.\n\nTiming and plain pulleys are specializaitons of AbstractPulley, permitting functions that need only the pulley location, rotation axis, or pitch diameter to accept any argument that maps to AbstractPulley, while allowing those needing tooth properties to specify arguments of TimingPulley type.\n\nCalculations are perfomed on the pulley or belt pitch line.\n\nExports methods:\n\nAbstractPulley\nPlainPulley\nSegment\nTimingPulley\ncalculateBeltLength\ncalculateRouteAngles\ncalculateWrappedAngle\ncalculateWrappedLength\ndistance\nfindTangents\ngetArrivalPoint\ngetDeparturePoint\nisSegmentMutuallyTangent\nlength\nnGrooves2Length\nnGrooves2Radius\npitchLength\nprintPulley\nprintRoute\nprintSegments\npulley2Circle\npulley2String\nradius2NGrooves\nroute2Segments\ntoString\ntoStringPoints\ntoStringShort\ntoStringVectors\n\n\n\n\n\n","category":"module"},{"location":"#BeltTransmission.AbstractPulley","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.AbstractPulley","text":"Subtypes of AbstractPulley model a particular form of pulley. At present that includes PlainPulleys, having cylindrical faces, and TimingPulley. All subtypes have basic fields of pitch::Circle, axis::UnitVector, arrive::Angle, depart::Angle, and a name::String.\n\n\n\n\n\n","category":"type"},{"location":"#BeltTransmission.PlainPulley","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.PlainPulley","text":"Models a cylindrical plain pulley in a BeltTransmission with:\n\npitch\nthe pitch Circle\naxis\nthe rotation axis for the pulley with +/- defining the 'positive' rotation direction\narrive\nangle of the radial vector of the belt's point of arrival\ndepart\nangle of the radial vector of the belt's point of departure\nname\nconvenience name of the pulley\n\n\n\n\n\n","category":"type"},{"location":"#BeltTransmission.PlainPulley-Tuple{Geometry2D.Circle, Geometry2D.UnitVector, String}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.PlainPulley","text":"PlainPulley(circle::Geometry2D.Circle, axis::Geometry2D.UnitVector, name::String) :: PlainPulley\n\nModels a PlainPulley in a BeltTransmission, described by a circle, rotation axis, and name.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.PlainPulley-Tuple{Geometry2D.Point, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Geometry2D.UnitVector, String}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.PlainPulley","text":"PlainPulley(center::Geometry2D.Point, radius::Unitful.Length, axis::Geometry2D.UnitVector, name::String) :: PlainPulley\n\nModels a PlainPulley in a BeltTransmission, having a pitch diameter, rotation axis, angles arrive and depart when rotated postively according to the axis, and an optional name.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.PlainPulley-Tuple{Geometry2D.Point, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Geometry2D.UnitVector}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.PlainPulley","text":"PlainPulley(center::Geometry2D.Point, radius::Unitful.Length, axis::Geometry2D.UnitVector) :: PlainPulley\n\nModels a PlainPulley in a BeltTransmission, having a pitch diameter, rotation axis, angles arrive and depart when rotated postively according to the axis, and an optional name.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.PlainPulley-Tuple{Geometry2D.Point, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, String}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.PlainPulley","text":"PlainPulley(center::Geometry2D.Point, radius::Unitful.Length, name::String) :: PlainPulley\n\nModels a PlainPulley in a BeltTransmission, located at center with pitch radius and name.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.PlainPulley-Tuple{Geometry2D.Point, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.PlainPulley","text":"PlainPulley(center::Geometry2D.Point, radius::Unitful.Length) :: PlainPulley\n\nModels a PlainPulley in a BeltTransmission, located at center with pitch radius.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.Segment","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.Segment","text":"Describes a belt segment between depart and arrive Pulleys.\n\ndepart\nDeparting PlainPulley\narrive\nArriving PlainPulley\n\n\n\n\n\n","category":"type"},{"location":"#BeltTransmission.TimingPulley","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.TimingPulley","text":"Models a TimingPulley in a BeltTransmission, described by a pitch circle, rotation axis and beltPitch.\n\n\n\n\n\n","category":"type"},{"location":"#Base.length-Tuple{Segment}","page":"Modeling Planar Belt Transmissions","title":"Base.length","text":"Base.length(seg::Segment) :: Unitful.Length\n\nReturns the straight-line distance or length of Segment seg via distance.\n\n\n\n\n\n","category":"method"},{"location":"#Base.show-Tuple{IO, AbstractPulley}","page":"Modeling Planar Belt Transmissions","title":"Base.show","text":"Base.show(io::IO, p::AbstractPulley)\n\nFunction to show() a AbstractPulley via pulley2String.\n\n\n\n\n\n","category":"method"},{"location":"#Base.show-Tuple{IO, Segment}","page":"Modeling Planar Belt Transmissions","title":"Base.show","text":"Base.show(io::IO, seg::Segment)\n\nshow()s the Segment via toStringShort.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.calculateBeltLength-Tuple{Vector{PlainPulley}}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.calculateBeltLength","text":"calculateBeltLength(route::Vector{PlainPulley}) :: Unitful.Length\n\nCalculates the belt length over the given route as the sum of circular sections at the PlainPulley pitch radii between the arrival and departure angles.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.calculateBeltLength-Tuple{Vector{Segment}}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.calculateBeltLength","text":"calculateBeltLength(segments::Vector{Segment}) :: Unitful.Length\n\nCalculates the belt length over the given route as the sum of straight Segments.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.calculateRouteAngles-Tuple{Vector{PlainPulley}}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.calculateRouteAngles","text":"calculateRouteAngles(route::Vector{PlainPulley}, plotSegments::Bool=false) :: Vector{PlainPulley}\n\nGiven an ordered vector of Pulleys, output a vector of new Pulleys whose arrive and depart angles are set to connect the pulleys with mutually tangent segments. Convention: pulleys are listed in 'positive' belt rotation order, consistent with the direction of each PlainPulley's rotation axis.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.calculateWrappedAngle-Tuple{AbstractPulley}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.calculateWrappedAngle","text":"calculateWrappedAngle(p::AbstractPulley) :: Geometry2D.Angle\n\nGiven p, calculate the wrapped angle from p.arrive to p.depart. Note that the wrapped angle is not restricted to <= 1 revolution, as the pulley may be wrapped multiple times.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.calculateWrappedLength-Tuple{AbstractPulley}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.calculateWrappedLength","text":"calculateWrappedLength(p::AbstractPulley) :: Unitful.Length\n\nGiven p, calculate the arclength of the wrapped segment from p.arrive to p.depart Note that the wrapped length is not restricted to <= 1 revolution, as the pulley may be wrapped multiple times.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.distance-Tuple{Segment}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.distance","text":"distance(seg::Segment) :: Unitful.Length\n\nReturns the straight-line distance or length of Segment seg.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.findTangents-Tuple{Segment}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.findTangents","text":"findTangents(; a::PlainPulley, b::PlainPulley, plotResult::Bool=false) :: Vector{Segment}\n\nFind four lines tangent to both PlainPulley a and b, returns 4 Segments with departure and arrival angles locating the points of tangency on the circles.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.getArrivalPoint-Tuple{AbstractPulley}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.getArrivalPoint","text":"getArrivalPoint(p::AbstractPulley)::Geometry2D.Point\n\nReturns the point of arrival.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.getArrivalPoint-Tuple{Segment}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.getArrivalPoint","text":"getArrivalPoint(seg::Segment) :: Geometry2D.Point\n\nReturns the arrival Geometry2D.Point of seg.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.getDeparturePoint-Tuple{AbstractPulley}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.getDeparturePoint","text":"getDeparturePoint(p::AbstractPulley)::Geometry2D.Point\n\nReturns the point of departure.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.getDeparturePoint-Tuple{Segment}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.getDeparturePoint","text":"getDeparturePoint(seg::Segment) :: Geometry2D.Point\n\nReturns the departure Geometry2D.Point of seg.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.isSegmentMutuallyTangent-Tuple{Segment}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.isSegmentMutuallyTangent","text":"isSegmentMutuallyTangent( seg::Segment ) :: Bool\n\nDetermines whether the departure and arrival points are tangent to the connecting belt segment.\n\nFor a segment a->b between ai&bi; the correct arrival and departure angles will have cross products that match both axes,   (ra-a1)x(a1-b1) = ax1 && (rb-b1)x(a1-b1) = bx1, all others should be false.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.nGrooves2Length-Tuple{Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Integer}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.nGrooves2Length","text":"nGrooves2Length(pitch::Unitful.Length, nGrooves::Integer)::Unitful.Length\n\nConvert the pitch and nGrooves to the circumferential length.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.nGrooves2Radius-Tuple{Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Integer}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.nGrooves2Radius","text":"nGrooves2Radius(pitch::Unitful.Length, nGrooves::Integer)::Unitful.Length\n\nConvert the pitch and nGrooves to the pitch radius.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.pitchLength-Tuple{AbstractPulley}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.pitchLength","text":"pitchLength(p::AbstractPulley) :: Unitful.Length\n\nReturns the circumferential length of the pitch diameter of the pulley.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.printPulley-Tuple{AbstractPulley}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.printPulley","text":"printPulley(p::AbstractPulley)\n\nPrints the result of pulley2String to the standard output\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.printRoute-Tuple{Vector{PlainPulley}}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.printRoute","text":"printRoute(route::Vector{PlainPulley})\n\nPrints the Pulleys and total belt length for the given route.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.printSegments-Tuple{Vector{Segment}}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.printSegments","text":"printSegments(segments::Vector{Segment})\n\nPrints the Segments, and total belt length for the given route.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.pulley2Circle-Tuple{AbstractPulley}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.pulley2Circle","text":"pulley2Circle(p::AbstractPulley) :: Geometry2D.Circle\n\nReturns the pitch Circle of p.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.pulley2String-Tuple{PlainPulley}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.pulley2String","text":"pulley2String(p::PlainPulley) :: String\n\nReturns a descriptive string of the given PlainPulley p of the form:     pulley[struct] @ [1.000,2.000] r[3.000] mm arrive[57.296°] depart[114.592°] aWrap[57.296°] lWrap[3.000]\"\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.pulley2String-Tuple{TimingPulley}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.pulley2String","text":"pulley2String(p::TimingPulley) :: String\n\nReturns a descriptive string of the given TimingPulley p of the form:     timing pulley[struct] @ [1.000,2.000] r[3.000] mm arrive[57.296°] depart[114.592°] aWrap[57.296°] lWrap[3.000]\"\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.radius2NGrooves-Tuple{Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.radius2NGrooves","text":"radius2NGrooves(pitch::Unitful.Length, radius::Unitful.Length)::Integer\n\nConvert the pitch and radius to the number of grooves.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.route2Segments-Tuple{Vector{PlainPulley}}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.route2Segments","text":"route2Segments(route::Vector{PlainPulley}) :: Vector{Segment}\n\nGiven the ordered Pulleys of a belt routing, returns a vector of the free-space Segments connecting the Pulleys.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.toString-Tuple{Segment}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.toString","text":"toString(seg::Segment) :: String\n\nCalls toStringShort.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.toStringPoints-Tuple{Segment}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.toStringPoints","text":"toStringPoints(seg::Segment) :: String\n\nCreates strings like:     Segment: depart[100.000, 110.000] – arrive[-100.000, 110.000] length[200.000]\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.toStringShort-Tuple{Segment}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.toStringShort","text":"toStringShort(seg::Segment) :: String\n\nReturns a short string of the form 'A – B', for a departing PlainPulley named A arriving at a PlainPulley named B.\n\n\n\n\n\n","category":"method"},{"location":"#BeltTransmission.toStringVectors-Tuple{Segment}","page":"Modeling Planar Belt Transmissions","title":"BeltTransmission.toStringVectors","text":"toStringVectors(seg::Segment) :: String\n\nCreates strings like:     \"A:[100.000,100.000]<10.000@90.000°>[100.000,110.000]–B:[-100.000,100.000]<10.000@90.000°>[-100.000,110.000]\"\n\n\n\n\n\n","category":"method"},{"location":"#KeywordDispatch.kwcall-Union{Tuple{var\"#14#T\"}, Tuple{NamedTuple{(:axis, :center, :name, :radius), var\"#14#T\"}, Type{PlainPulley}}} where var\"#14#T\"<:Tuple{Geometry2D.UnitVector, Geometry2D.Point, String, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}","page":"Modeling Planar Belt Transmissions","title":"KeywordDispatch.kwcall","text":"PlainPulley(; center::Geometry2D.Point, radius::Unitful.Length, axis::Geometry2D.UnitVector, name::String) :: PlainPulley\n\nModels a PlainPulley in a BeltTransmission through keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#KeywordDispatch.kwcall-Union{Tuple{var\"#19#T\"}, Tuple{NamedTuple{(:axis, :circle, :name), var\"#19#T\"}, Type{PlainPulley}}} where var\"#19#T\"<:Tuple{Geometry2D.UnitVector, Geometry2D.Circle, String}","page":"Modeling Planar Belt Transmissions","title":"KeywordDispatch.kwcall","text":"PlainPulley(; circle::Geometry2D.Circle, axis::Geometry2D.UnitVector, name::String) :: PlainPulley\n\nModels a PlainPulley in a BeltTransmission through keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#KeywordDispatch.kwcall-Union{Tuple{var\"#21#T\"}, Tuple{NamedTuple{(:arrive, :axis, :circle, :depart, :name), var\"#21#T\"}, Type{PlainPulley}}} where var\"#21#T\"<:Tuple{Union{Unitful.Quantity{T, NoDims, U}, Unitful.Level{L, S, Unitful.Quantity{T, NoDims, U}} where {L, S}} where {T, U}, Geometry2D.UnitVector, Geometry2D.Circle, Union{Unitful.Quantity{T, NoDims, U}, Unitful.Level{L, S, Unitful.Quantity{T, NoDims, U}} where {L, S}} where {T, U}, String}","page":"Modeling Planar Belt Transmissions","title":"KeywordDispatch.kwcall","text":"PlainPulley(; circle::Geometry2D.Circle, axis::Geometry2D.UnitVector, arrive::Geometry2D.Radian, depart::Geometry2D.Radian, name::String) :: PlainPulley\n\nModels a PlainPulley in a BeltTransmission through keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#KeywordDispatch.kwcall-Union{Tuple{var\"#31#T\"}, Tuple{NamedTuple{(:arrive, :axis, :beltPitch, :depart, :name, :pitch), var\"#31#T\"}, Type{TimingPulley}}} where var\"#31#T\"<:Tuple{Union{Unitful.Quantity{T, NoDims, U}, Unitful.Level{L, S, Unitful.Quantity{T, NoDims, U}} where {L, S}} where {T, U}, Geometry2D.UnitVector, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, NoDims, U}, Unitful.Level{L, S, Unitful.Quantity{T, NoDims, U}} where {L, S}} where {T, U}, String, Geometry2D.Circle}","page":"Modeling Planar Belt Transmissions","title":"KeywordDispatch.kwcall","text":"TimingPulley(; pitch::Geometry2D.Circle, axis::Geometry2D.UnitVector, beltPitch::Unitful.Length, arrive::Geometry2D.Radian, depart::Geometry2D.Radian, name::String) :: TimingPulley\n\nModels a TimingPulley in a BeltTransmission, described by a pitch circle, rotation axis and beltPitch. Optional angles arrive and depart specify belt's arrival and departure tangent points. name identifies the pulley when plotting and printing.\n\n\n\n\n\n","category":"method"},{"location":"#KeywordDispatch.kwcall-Union{Tuple{var\"#39#T\"}, Tuple{NamedTuple{(:axis, :beltPitch, :center, :name, :radius), var\"#39#T\"}, Type{TimingPulley}}} where var\"#39#T\"<:Tuple{Geometry2D.UnitVector, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Geometry2D.Point, String, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}","page":"Modeling Planar Belt Transmissions","title":"KeywordDispatch.kwcall","text":"TimingPulley(; center::Geometry2D.Point, radius::Unitful.Length, axis::Geometry2D.UnitVector, beltPitch::Unitful.Length, arrive::Geometry2D.Radian, depart::Geometry2D.Radian, name::String)\n\nModels a TimingPulley in a BeltTransmission, described by a circle, rotation axis, and name.\n\n\n\n\n\n","category":"method"},{"location":"#KeywordDispatch.kwcall-Union{Tuple{var\"#41#T\"}, Tuple{NamedTuple{(:axis, :beltPitch, :center, :nGrooves, :name), var\"#41#T\"}, Type{TimingPulley}}} where var\"#41#T\"<:Tuple{Geometry2D.UnitVector, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Geometry2D.Point, Integer, String}","page":"Modeling Planar Belt Transmissions","title":"KeywordDispatch.kwcall","text":"TimingPulley(; center::Geometry2D.Point, nGrooves::Integer, axis::Geometry2D.UnitVector, beltPitch::Unitful.Length, name::String)\n\nModels a TimingPulley in a BeltTransmission, described by a circle, rotation axis, and name. nGrooves and beltPitch are used to find the pulley pitch diameter.\n\n\n\n\n\n","category":"method"},{"location":"#KeywordDispatch.kwcall-Union{Tuple{var\"#51#T\"}, Tuple{NamedTuple{(:arrive, :depart), var\"#51#T\"}, Type{Segment}}} where var\"#51#T\"<:Tuple{PlainPulley, PlainPulley}","page":"Modeling Planar Belt Transmissions","title":"KeywordDispatch.kwcall","text":"Segment(; depart::PlainPulley, arrive::PlainPulley) :: Segment\n\nCreate a belt Segment between depart and arrive Pulleys\n\n\n\n\n\n","category":"method"},{"location":"#RecipesBase.apply_recipe-Tuple{AbstractDict{Symbol, Any}, PlainPulley}","page":"Modeling Planar Belt Transmissions","title":"RecipesBase.apply_recipe","text":"plotRecipe(p::PlainPulley; n=100, lengthUnit=u\"mm\", segmentColor=:magenta, arrowFactor=0.03)\n\nA plot recipe for plotting Pulleys under Plots.jl. Keyword n can be used to increase the number of points constituting the pulley edge. lengthUnit is a Unitful unit for scaling the linear axes. arrowFactor controls the size of the arrow head at depart.\n\nusing Plots, Unitful, BeltTransmission, Geometry2D\np = PlainPulley( Geometry2D.Circle(1u\"mm\",2u\"mm\",3u\"mm\"), Geometry2D.uk, \"recipe\" )\nplot(p)\n\n\n\n\n\n","category":"method"},{"location":"#RecipesBase.apply_recipe-Tuple{AbstractDict{Symbol, Any}, Segment}","page":"Modeling Planar Belt Transmissions","title":"RecipesBase.apply_recipe","text":"plotRecipe(seg::Segment; n=100, lengthUnit=u\"mm\", segmentColor=:magenta, arrowFactor=0.03)\n\nPlot recipe to plot the free sections of a segment, does not plot the pulleys.\n\nusing Plots, Unitful, BeltTransmission, Geometry2D\na = PlainPulley( Geometry2D.Circle(1u\"mm\",2u\"mm\",3u\"mm\"), Geometry2D.uk, \"recipe\" )\nb = PlainPulley( Geometry2D.Circle(10u\"mm\",2u\"mm\",3u\"mm\"), Geometry2D.uk, \"recipe\" )\nseg = Segment(depart=a, arrive=b)\nplot(seg)\n\n\n\n\n\n","category":"method"},{"location":"#RecipesBase.apply_recipe-Tuple{AbstractDict{Symbol, Any}, TimingPulley}","page":"Modeling Planar Belt Transmissions","title":"RecipesBase.apply_recipe","text":"plotRecipe(p::TimingPulley; n=100, lengthUnit=u\"mm\", segmentColor=:magenta, arrowFactor=0.03)\n\nA plot recipe for plotting Pulleys under Plots.jl. Keyword n can be used to increase the number of points constituting the pulley edge. lengthUnit is a Unitful unit for scaling the linear axes. arrowFactor controls the size of the arrow head at depart.\n\nusing Plots, Unitful, BeltTransmission, Geometry2D\np = TimingPulley( Geometry2D.Circle(1u\"mm\",2u\"mm\",3u\"mm\"), Geometry2D.uk, \"recipe\" )\nplot(p)\n\n\n\n\n\n","category":"method"},{"location":"#RecipesBase.apply_recipe-Tuple{AbstractDict{Symbol, Any}, Vector{PlainPulley}}","page":"Modeling Planar Belt Transmissions","title":"RecipesBase.apply_recipe","text":"plotRecipe(route::Vector{PlainPulley})\n\nPlots the Pulleys in a route.\n\nusing Plots, Unitful, BeltTransmission, Geometry2D\na = PlainPulley( Geometry2D.Circle(1u\"mm\",2u\"mm\",3u\"mm\"), Geometry2D.uk, \"recipe\" )\nb = PlainPulley( Geometry2D.Circle(10u\"mm\",2u\"mm\",3u\"mm\"), Geometry2D.uk, \"recipe\" )\nroute = calculateRouteAngles([a,b])\nplot(route)\n\n\n\n\n\n","category":"method"},{"location":"#RecipesBase.apply_recipe-Tuple{AbstractDict{Symbol, Any}, Vector{Segment}}","page":"Modeling Planar Belt Transmissions","title":"RecipesBase.apply_recipe","text":"plotRecipe(segments::Vector{Segment})\n\nPlots the Pulleys and Segments in a route.\n\nusing Plots, Unitful, BeltTransmission, Geometry2D\na = PlainPulley( Geometry2D.Circle(1u\"mm\",2u\"mm\",3u\"mm\"), Geometry2D.uk, \"recipe\" )\nb = PlainPulley( Geometry2D.Circle(10u\"mm\",2u\"mm\",3u\"mm\"), Geometry2D.uk, \"recipe\" )\nroute = calculateRouteAngles([a,b])\nsegments = route2Segments(route)\nplot(segments)\n\n\n\n\n\n","category":"method"},{"location":"beltDesign/#Belt-Design-example","page":"Belt Design example","title":"Belt Design example","text":"","category":"section"},{"location":"standalone/#Standalone-Example","page":"Standalone Example","title":"Standalone Example","text":"","category":"section"}]
}
