# This allows Synchronous belt transmissions to be modeled, providing specific calculation and optimization methods

export SynchronousBelt, pitchLength2NTeeth, nTeeth2PitchLength#, belt2NTeeth, belt2PitchLength

"""
  Represents a synchronous belt with parameters:
  `profile::String` - tooth profile name
  `pitch::Unitful.Length` - distance between belt grooves
  `length::Unitful.Length` - belt linear length if cut
  `nTeeth::Int` - number of teeth over the length
  `width::Unitful.Length` - belt width
  `partNumber::String` - reference name
  `supplier::String` - reference name
  `url::String` - sourcing link
  `id::UUID` - unique id
"""
struct SynchronousBelt 
  # arrive::AbstractPulley
  # depart::AbstractPulley
  #    or 
  # segments::Vector{Segment}
  """Name of the tooth profile"""
  profile::String 
  """Distance between belt teeth"""
  pitch::Unitful.Length 
  """Belt linear length if cut"""
  length::Unitful.Length 
  """Number of teeth on the belt"""
  nTeeth::Int 
  """Width of the belt"""
  width::Unitful.Length 
  """Reference part number"""
  partNumber::String 
  """Reference supplier"""
  supplier::String 
  """Reference sourcing url"""
  url::String 
  """Autogenerated unique id"""
  id::UUID
end 

@kwdispatch SynchronousBelt() 

# 220526: KeywordDispatch can't have default arguments: https://github.com/simonbyrne/KeywordDispatch.jl/issues/1 , so iterate
"""
    SynchronousBelt(; pitch::Unitful.Length, length::Unitful.Length, nTeeth::Int,  width::Unitful.Length, profile::String, partNumber::String, supplier::String, url::String, id::UUID )
    SynchronousBelt(; pitch::Unitful.Length, length::Unitful.Length,               width::Unitful.Length, profile::String)
    SynchronousBelt(; pitch::Unitful.Length,                         nTeeth::Int,  width::Unitful.Length, profile::String)
  Creates a SynchronousBelt with tooth `pitch`, overall `length`, `nTeeth`, belt `width` and `profile` name.
"""
@kwmethod SynchronousBelt(; pitch::Unitful.Length, length::Unitful.Length, nTeeth::Int,  width::Unitful.Length, profile::String, partNumber::String, supplier::String, url::String, id::UUID ) = SynchronousBelt( profile, pitch, length, nTeeth, width, partNumber, supplier, url, id)

@kwmethod SynchronousBelt(; pitch::Unitful.Length, length::Unitful.Length,               width::Unitful.Length, profile::String) = SynchronousBelt( profile, pitch, length, pitchLength2NTeeth(pitch=pitch, length=length), width, "pn00", "spA", "url0", UUIDs.uuid4() )

@kwmethod SynchronousBelt(; pitch::Unitful.Length, nTeeth::Int,                          width::Unitful.Length, profile::String) = SynchronousBelt( profile, pitch, nTeeth2PitchLength(pitch=pitch, nTeeth=nTeeth), nTeeth,                width, "pn00", "spA", "url0", UUIDs.uuid4() )

"""
    SynchronousBelt( belt::SynchronousBelt; partNumber="", supplier="", url="" ) :: SynchronousBelt
  A copy constructor for adding/changing `partNumber`, `supplier`, or `url`.
  """
function SynchronousBelt( belt::SynchronousBelt; partNumber="", supplier="", url="" ) :: SynchronousBelt
  pn = belt.partNumber
  if partNumber != ""
      pn = partNumber
  end
  sp = belt.supplier
  if supplier != ""
      sp = supplier
  end
  ur = belt.url
  if url != ""
      ur = url
  end
  return SynchronousBelt( belt.profile, belt.pitch, belt.length, belt.nTeeth, belt.width, pn, sp, ur, belt.id )
end

"""
    pitchLength2NTeeth(; pitch::Unitful.Length, length::Unitful.Length )::Integer
  `nTeeth` is simply `length`/`pitch`.
"""
function pitchLength2NTeeth(; pitch::Unitful.Length, length::Unitful.Length )::Integer
  return convert(Int64, round(length/pitch))
end

"""
    nTeeth2PitchLength(; pitch::Unitful.Length, nTeeth::Integer) :: Unitful.Length
  Belt `length` is `pitch` * `nTeeth`.
"""
function nTeeth2PitchLength(; pitch::Unitful.Length, nTeeth::Integer) :: Unitful.Length
  return pitch * nTeeth
end


export SynchronousPulley, nGrooves2Radius, radius2NGrooves, nGrooves2Length

"""
  Models a SynchronousPulley in a BeltTransmission, described by a `pitch` circle, rotation `axis`, and `beltPitch`.
  $FIELDS
"""
struct SynchronousPulley <: AbstractPulley
  """Circle describing the pulley pitch diameter."""
  pitch::Geometry2D.Circle

  """The rotation axis for the pulley with +/- defining the 'positive' rotation direction."""
  axis::Geometry2D.UnitVector 

  """Distance between belt teeth"""
  beltPitch::Unitful.Length #[mm/groove] -- would like a Synchrounous meta-class to provide these definitions, not sure if this is allowed

  """Angle of the radial vector of the belt's point of arrival."""
  arrive::Geometry2D.Radian

  """Angle of the radial vector of the belt's point of departure."""
  depart::Geometry2D.Radian

  """Convenience name of the pulley."""
  name::String
end

"""
    SynchronousPulley(center::Geometry2D.Point, axis::Geometry2D.UnitVector, nGrooves::Integer, beltPitch::Unitful.Length, name::String)
  Models a SynchronousPulley in a BeltTransmission located at `center` rotating about `axis` with `nGrooves`(=nTeeth) spaced with arc length `beltPitch` and covenience `name`.
"""
SynchronousPulley(center::Geometry2D.Point, axis::Geometry2D.UnitVector, nGrooves::Integer, beltPitch::Unitful.Length, name::String) = SynchronousPulley(Geometry2D.Circle(center, nGrooves2Radius(beltPitch, nGrooves)),axis,beltPitch, 0u"rad", 0u"rad", name) 

"""
    SynchronousPulley(sp::SynchronousPulley, arrive=0u"rad", depart=0u"rad")
  A copy constructor for setting the `arrive` and `depart` angles.
"""
SynchronousPulley(sp::SynchronousPulley, arrive=0u"rad", depart=0u"rad") = SynchronousPulley(sp.pitch,sp.axis,sp.beltPitch,arrive,depart,sp.name) #copy constructor

@kwdispatch SynchronousPulley() #kwdispatch can't have default arguments, so define first with everything, then narrow:

"""
    SynchronousPulley(; center::Geometry2D.Point, axis::Geometry2D.UnitVector, nGrooves::Integer, beltPitch::Unitful.Length, arrive::Geometry2D.Radian, depart::Geometry2D.Radian, name::String)
    SynchronousPulley(; center::Geometry2D.Point, axis::Geometry2D.UnitVector, nGrooves::Integer, beltPitch::Unitful.Length, name::String)
  Models a SynchronousPulley in a BeltTransmission, described by a `circle`, rotation `axis`, and `name`.
  `nGrooves` and `beltPitch` are used to find the pulley pitch diameter.
  The belt's `arrive` and `depart` angles are the polar angles about the pulley axis of the belt's arrival and departure contact points, usually found by [calculateRouteAngles()](#calculateRouteAngles)
"""
@kwmethod SynchronousPulley(; center::Geometry2D.Point, axis::Geometry2D.UnitVector, nGrooves::Integer, beltPitch::Unitful.Length, arrive::Geometry2D.Radian, depart::Geometry2D.Radian, name::String) = SynchronousPulley(Geometry2D.Circle(center, nGrooves2Radius(beltPitch, nGrooves)), axis, beltPitch, arrive, depart, name) 
@kwmethod SynchronousPulley(; center::Geometry2D.Point, axis::Geometry2D.UnitVector, nGrooves::Integer, beltPitch::Unitful.Length, name::String) = SynchronousPulley(Geometry2D.Circle(center, nGrooves2Radius(beltPitch, nGrooves)),axis,beltPitch, 0u"rad", 0u"rad", name) 

"""
    nGrooves2Radius(pitch::Unitful.Length, nGrooves::Integer)::Unitful.Length
  Convert the `pitch` and `nGrooves` to the pitch radius.
"""
function nGrooves2Radius(pitch::Unitful.Length, nGrooves::Integer)::Unitful.Length
  return (nGrooves*pitch)/(2*pi)
end

"""
    radius2NGrooves(p::SynchronousPulley)::Integer
    radius2NGrooves(pitch::Unitful.Length, radius::Unitful.Length)::Integer
  Convert the `pitch` and `radius` to the number of grooves.
"""
function radius2NGrooves(p::SynchronousPulley)::Integer
  return radius2NGrooves(p.beltPitch, p.pitch.radius)
end
function radius2NGrooves(pitch::Unitful.Length, radius::Unitful.Length)::Integer
    return convert(Int32,round(2*pi*radius/pitch))
end

"""
    nGrooves2Length(pitch::Unitful.Length, nGrooves::Integer)::Unitful.Length
  Convert the `pitch` and `nGrooves` to the circumferential length.
"""
function nGrooves2Length(pitch::Unitful.Length, nGrooves::Integer)::Unitful.Length
  return pitch * nGrooves
end


# """ coerce the given radius to the nearest radius having an integer number of grooves """
#function coerceRadius(pitch::Unitful.Length, radius::Unitful.Length) :: Unitful.Length
#  return nGrooves2Radius( pitch, radius2NGrooves(pitch, radius))
#end

"""
    pulley2String(p::SynchronousPulley) :: String
  Returns a descriptive string of the given SynchronousPulley `p` of the form:
    SynchronousPulley[struct] @ [1.000mm,2.000mm] r[3.000mm] arrive[57.296°] depart[114.592°] aWrap[57.296°] lWrap[3.000mm]"
"""
function pulley2String(p::SynchronousPulley)::String 
  un = unit(p.pitch.radius)
  return @sprintf("SynchronousPulley[%s] @ [%3.3f%s,%3.3f%s] r[%3.3f%s]=[%dgrooves] arrive[%3.3f°] depart[%3.3f°] aWrap[%3.3f°] lWrap[%3.3f%s]",
    p.name, 
    ustrip(un, p.pitch.center.x), string(un),
    ustrip(un, p.pitch.center.y), string(un),
    ustrip(un, p.pitch.radius), string(un),
    radius2NGrooves(p),
    ustrip(u"°",p.arrive), ustrip(u"°",p.depart),
    ustrip(u"°",calculateWrappedAngle(p)),
    ustrip(un,calculateWrappedLength(p)), string(un)
    )
end

